1
00:00:01,910 --> 00:00:09,050
Hello, I'm Thanos Zolotas. I am a research fellow at the Automated Software Engineering Research Group of the department.

2
00:00:09,050 --> 00:00:15,380
I welcome you to this lecture about a technology that software engineers around the world use to facilitate their work,

3
00:00:15,380 --> 00:00:22,250
mostly in collaborative environments. This lecture is about version control systems, also known as VCSs.

4
00:00:22,250 --> 00:00:26,600
This is the outline of today's lecture.

5
00:00:26,600 --> 00:00:30,750
I will start by introducing you to the world of version control systems.

6
00:00:30,750 --> 00:00:40,460
Motivate on the need for using them as part of any software engineering project, followed by a short summary of historical version control systems.

7
00:00:40,460 --> 00:00:46,040
I will present the current state of the art focussing on two different version control systems

8
00:00:46,040 --> 00:00:51,830
that represent two different approaches in versioning software in a collaborative environment.

9
00:00:51,830 --> 00:00:57,700
You will also have the opportunity to see how one of them, namely Git, is used in practise in a demo.

10
00:00:57,700 --> 00:01:03,130
consisting of a series of tasks that commonly appear in an any version control process.

11
00:01:03,130 --> 00:01:08,950
This time will be split in two parts, one focussing versioning software in non-collaborative environment,

12
00:01:08,950 --> 00:01:17,580
the second including the trickiest part of Git, that of using it as part of a team project where collaboration is necessary.

13
00:01:17,580 --> 00:01:24,980
So what is a version control system? As the name suggests it is a technology that allows controlling the version of artefacts.

14
00:01:24,980 --> 00:01:29,340
These artefacts are most probably pieces of code,

15
00:01:29,340 --> 00:01:37,080
but it is quite common nowadays to use version control systems in other projects that include plain text, for example.

16
00:01:37,080 --> 00:01:40,470
This is a classic scenario of a software engineering process.

17
00:01:40,470 --> 00:01:48,000
Let's say that we, as software engineers released the first version of the software under development, which works fine.

18
00:01:48,000 --> 00:01:54,180
It is quite common for new requirements to emerge, which we implement and when we are happy with the results.

19
00:01:54,180 --> 00:01:59,400
a new version of our software is released. The same process is repeated.

20
00:01:59,400 --> 00:02:05,020
However, it's not always the case that the versions we release are performing as expected.

21
00:02:05,020 --> 00:02:08,190
Unfortunately, disasters happen.

22
00:02:08,190 --> 00:02:18,070
We need to have a way to safely go back to an older version that used to work fine until we fix those bugs in the new version that caused the problems.

23
00:02:18,070 --> 00:02:26,050
Version control systems offer the necessary infrastructure to be able to do so in an easy manner. In the world of version control systems

24
00:02:26,050 --> 00:02:30,460
the action of creating a new version of our software is called commit

25
00:02:30,460 --> 00:02:40,510
while the process of going back to an old version is called revert. This example highlights the most important role of version control systems.

26
00:02:40,510 --> 00:02:48,970
They provide the technical offering for storing different versions, going back and forth between them when needed. As a direct result of these

27
00:02:48,970 --> 00:02:54,670
they also offer a history of all the different versions that we have developed in the past.

28
00:02:54,670 --> 00:03:01,570
For example, the Mozilla Firefox project and other projects provide access to all the past versions that have been

29
00:03:01,570 --> 00:03:08,290
released in case for any reason a user needs to download and install another version.

30
00:03:08,290 --> 00:03:08,750
However,

31
00:03:08,750 --> 00:03:17,410
this is not the only reason why version control systems are used nowadays. By having a detailed log of what has changed between the different versions

32
00:03:17,410 --> 00:03:23,740
software engineers can easily identify the parts of code that were altered or introduced in the new version.

33
00:03:23,740 --> 00:03:28,210
thus, locate those parts that have possibly introduced the bugs.

34
00:03:28,210 --> 00:03:33,640
Also, version control systems are now used to enable and facilitate collaboration,

35
00:03:33,640 --> 00:03:42,320
providing a common place where the code can be stored, while they act as a good place to keep backups of our work.

36
00:03:42,320 --> 00:03:48,580
Although, nowadays there are plenty of sophisticated systems that allow versioning of artefacts, users still use simpler ways

37
00:03:48,580 --> 00:03:57,230
in versioning files or projects. For example, frequently, people manually version the software by simply creating copies of their work,

38
00:03:57,230 --> 00:04:04,180
naming each file or folder using a datetag declaring when the changes were made.

39
00:04:04,180 --> 00:04:10,150
Although primitive, such manual approaches

40
00:04:10,150 --> 00:04:18,220
are still in use and could be thought as ways of versioning artefacts. If the goal is to identify changes between different versions,

41
00:04:18,220 --> 00:04:24,040
there are tools available grouped under the umbrella of what we call diff utilities that take as input two different

42
00:04:24,040 --> 00:04:30,560
versions of the same artefact and automatically highlight the differences between them. In a collaborative environment,

43
00:04:30,560 --> 00:04:36,760
it the case that groups of individuals would like to lock a piece of code while they're working on it to avoid

44
00:04:36,760 --> 00:04:40,840
others making changes in parallel creating inconsistencies.

45
00:04:40,840 --> 00:04:46,510
Modern version control systems, as you will see in that second part of the demo, offer such functionalities.

46
00:04:46,510 --> 00:04:52,570
But it is still the case that users perform this locking by using other methods.

47
00:04:52,570 --> 00:04:59,740
For example, all the components or packages or even classes of a software are included it into separate post-it notes or cups.

48
00:04:59,740 --> 00:05:04,830
One has to have the post-it or cup on their desk in order to be able to work on this component.

49
00:05:04,830 --> 00:05:13,600
This way they require the lock prohibiting others on working on the same artefact.

50
00:05:13,600 --> 00:05:18,820
Of course, a version control system replaces these manual tasks with auctions offered through a software,

51
00:05:18,820 --> 00:05:23,890
which all the participants need to install and interact with. The first computerised version

52
00:05:23,890 --> 00:05:31,200
control system appeared in 1972 and was called the Source Code Control System.

53
00:05:31,200 --> 00:05:37,660
Nine years later, in 1981, the revision control system made its debut.

54
00:05:37,660 --> 00:05:45,650
IBM joined the game in 1990 with the ClearCase software as part of their Rational suite.

55
00:05:45,650 --> 00:05:53,200
More computerised version control system were introduced later like the Source Safe and Delta, Microsoft's approach on versioning software.

56
00:05:53,200 --> 00:05:57,070
However, now none of this is in use,

57
00:05:57,070 --> 00:06:05,120
as more sophisticated version control system were developed and introduced, combining all the necessary features in one.

58
00:06:05,120 --> 00:06:15,060
There are different version control systems that are used nowadays. Apache Subversion, or most commonly known as SVN, is one of them.

59
00:06:15,060 --> 00:06:19,980
Apache SVN used to be the most widely used version control system.

60
00:06:19,980 --> 00:06:27,950
Even 20 years after its initial release, it's still being used in big projects and large software corporations worldwide.

61
00:06:27,950 --> 00:06:35,840
Darcs is another modern version control system as is Git. Git is may be the one that you've heard of and probably used in the past.

62
00:06:35,840 --> 00:06:40,970
It is the most widely used one right now. Mercurial is an emerging version control system

63
00:06:40,970 --> 00:06:46,970
while Bazaar, although promising at the beginning, is not quite maintained anymore.

64
00:06:46,970 --> 00:06:55,400
In this lecture I will focus on two of these version control systems, Apache SVN and Git. Not only because they are the most widely used,

65
00:06:55,400 --> 00:07:03,880
but also because they are representing examples of two different approaches in versioning artefacts.

66
00:07:03,880 --> 00:07:08,140
These approaches are the centralised approach, which Apache SVN follows,

67
00:07:08,140 --> 00:07:16,450
and the decentralised or distributed approach that Git follows. Before getting into details of what makes these two approaches different,

68
00:07:16,450 --> 00:07:23,570
I believe that it is necessary to introduce some terms used in all version control systems.

69
00:07:23,570 --> 00:07:28,980
First, we have the term repository. This is where everything is stored.

70
00:07:28,980 --> 00:07:34,820
A repository has the files, the documents, classes, etc., but also the historic data,

71
00:07:34,820 --> 00:07:40,160
along with any information needed by the version control system to be able to version the files.

72
00:07:40,160 --> 00:07:45,450
You can think of it as a hard disk drive that stores all this data.

73
00:07:45,450 --> 00:07:51,570
As we briefly explained in the motivating example, each time we need to store a change, a version in the repository,

74
00:07:51,570 --> 00:07:56,720
we need to commit. Thus, the verb commit is the action of storing a new version.

75
00:07:56,720 --> 00:08:04,100
While the noun commit is the actual version stored. It is a quiet common requirement in

76
00:08:04,100 --> 00:08:12,650
software development processes to be able to take a copy of our code base and work on this copy instead of the original artefacts.

77
00:08:12,650 --> 00:08:20,360
This is quite common scenario where we would like to develop a new feature, for example, without affecting the code stored in our released version

78
00:08:20,360 --> 00:08:25,580
until we're done with the development of this feature and we're sure that we want to release it.

79
00:08:25,580 --> 00:08:30,150
The process of creating such a copy is called branching.

80
00:08:30,150 --> 00:08:37,770
And the new copy, a branch. You can see it as a new path that share a common code base with our original software,

81
00:08:37,770 --> 00:08:44,130
at the moment the branching was executed. When we want to include the new code developed as part of the new branch

82
00:08:44,130 --> 00:08:48,120
we can simply combine the new branch with original code base in a process

83
00:08:48,120 --> 00:08:53,670
that it is called a merge. When we are working in a collaborative environment,

84
00:08:53,670 --> 00:08:58,310
it is also quite common for more than one people to work on the same artefact.

85
00:08:58,310 --> 00:09:04,410
Remember that although locking the file will help us avoid any problems, it is not necessary,

86
00:09:04,410 --> 00:09:09,210
the most effective way to develop software as it is most probably the case that we need

87
00:09:09,210 --> 00:09:13,860
to have more than one software engineers working on the same combonents in a project.

88
00:09:13,860 --> 00:09:17,940
Unfortunately, this comes with a drawback of creating conflicts.

89
00:09:17,940 --> 00:09:24,660
A conflict is a change or a number of changes that happen to the same files in parallel by different users.

90
00:09:24,660 --> 00:09:27,870
Sometimes these conflicts can be resolved automatically.

91
00:09:27,870 --> 00:09:37,070
As you will see in the last part of the demo, but also sometimes they require manual intervention for them to be resolved.

92
00:09:37,070 --> 00:09:44,670
We're now coming back to the two distinctive approaches that I talked about earlier, the centralised and the decentralised one.

93
00:09:44,670 --> 00:09:52,460
A centralised one that Apache SVN follows, has a unique central repository where all the information is stored.

94
00:09:52,460 --> 00:09:56,240
All the changes are committed to this central copy, which is unique.

95
00:09:56,240 --> 00:10:02,960
In contrast, the decentralised approach which Git follows has different copies of the same repository,

96
00:10:02,960 --> 00:10:09,410
each of which is equally valid. In a decentralised approach our commits happen in a local repository,

97
00:10:09,410 --> 00:10:17,720
and then through a process that I will explain later, are shared with others copies of the repository.

98
00:10:17,720 --> 00:10:22,340
So, Apache SVN, is a centralised version control system.

99
00:10:22,340 --> 00:10:27,860
When we commit a new version, it is tagged with a new ID which is increamented sequentially.

100
00:10:27,860 --> 00:10:34,160
For example, the first commit is tagged with version 1, the second with version 2, the third with version 3, etc.

101
00:10:34,160 --> 00:10:39,410
As you can see, versioning with SVN is a straight forward process.

102
00:10:39,410 --> 00:10:45,610
Let's see an example that demonstrates how versioning with SVN works.

103
00:10:45,610 --> 00:10:50,010
Let's say that one developer creates a piece of code and decides to version it.

104
00:10:50,010 --> 00:10:57,340
They simply commit this using SVN and the new version is stored in the repository tagged with a new ID.

105
00:10:57,340 --> 00:11:01,810
One of their colleagues is now able to update from SVN, meaning that they can now get the

106
00:11:01,810 --> 00:11:07,780
code committed and have a copy of it in their computer if they need to make some changes.

107
00:11:07,780 --> 00:11:14,420
They proceed and they commit the new code in the repository. That's now tagged with the new version.

108
00:11:14,420 --> 00:11:25,150
The straight forward and clear process makes SVN one of the simplest version control systems to understand and use.

109
00:11:25,150 --> 00:11:34,490
Following the update process, our initial colleague can now get the changed code on their local machine.

110
00:11:34,490 --> 00:11:39,230
There are different tools available that allow users to work with SVN repositories. 

111
00:11:39,230 --> 00:11:43,910
For Windows, the most well-known is TortoiseSVN. It's offered for free.

112
00:11:43,910 --> 00:11:53,890
MacOS users can either use SmartSVN, which offers most of its feeatures or for free. Versions, is a paid software for SVN for Mac.

113
00:11:53,890 --> 00:12:00,220
RapidSVN is a free tool for SVN for Linux. For those preferring cross platform solutions

114
00:12:00,220 --> 00:12:06,040
there are two Eclipse plugins, namely Subversive and Subclipse that are offered for free.

115
00:12:06,040 --> 00:12:09,370
I have personally used those highlighted and I was able to do everything I

116
00:12:09,370 --> 00:12:14,380
needed to do when working with SVN in a collaborative environment.

117
00:12:14,380 --> 00:12:25,310
Of course, you're free to use any others shown here. SVN has the benefit of working in a way that is easy to understand.

118
00:12:25,310 --> 00:12:33,320
It holds only one single copy of the repository, thus, everyone involved in the project knows the current versions and changes in the code.

119
00:12:33,320 --> 00:12:40,940
It is also a widely used version control system with plenty of learning resources.

120
00:12:40,940 --> 00:12:50,300
However, the fact that a single copy is stored is a big drawback. If this copy is lost for whatever reason, all the versions are lost as well.

121
00:12:50,300 --> 00:12:57,350
Also, it is developed in such a way that encourages large commits, that is big chunks of changes in once.

122
00:12:57,350 --> 00:13:08,600
While it's not quite helpful in branching. In contrast with SVN, Git is a classic example of a decentralised version control system.

123
00:13:08,600 --> 00:13:16,760
The ID of eeach version committed consists of 40 digit, hexadecimal number like the one shown here.

124
00:13:16,760 --> 00:13:26,070
These tags are constructed based on the user who did the commit, the commit message, information about the previous version and other things.

125
00:13:26,070 --> 00:13:31,840
In the same manner as before, let's say that one developer created a piece of code that needs to version.

126
00:13:31,840 --> 00:13:36,980
The commit this code in the repository and their colleague is now able to get a copy of it.

127
00:13:36,980 --> 00:13:43,120
However, this is not the case as Git requires one more extra step in this process.

128
00:13:43,120 --> 00:13:47,770
The version is committed to the local repository of the user.

129
00:13:47,770 --> 00:13:53,410
That is a copy that is stored locally on their computer. In order to make their changes available

130
00:13:53,410 --> 00:13:58,190
to other users, they need to publish their copy to the global repository.

131
00:13:58,190 --> 00:14:07,220
This is done through the extra step that's called a push. Other users are now able to pull the global repository to get a copy of it into

132
00:14:07,220 --> 00:14:13,630
their machine and have access to the code or changes their colleagues have made.

133
00:14:13,630 --> 00:14:19,120
Again, if they need to make a change, they first need to commit it to their local repository.

134
00:14:19,120 --> 00:14:27,580
They push it to the global one and only then their colleagues are able to get a copy of it by pulling it.

135
00:14:27,580 --> 00:14:34,290
In this simple scenario where only two users collborate, we have three copies of the same repository.

136
00:14:34,290 --> 00:14:42,630
Although this might sound as an overhead, it is possibly the best of the benefits that Git offers against its competition.

137
00:14:42,630 --> 00:14:50,670
Let's see why through an example. Imagine that we are on an airplane travelling and we don't have access to the Internet.

138
00:14:50,670 --> 00:14:59,310
With Git we can simply make changes to our code and commit them as frequently as we need and store them in our local repository.

139
00:14:59,310 --> 00:15:06,810
When we land, we can simply push these changes to the global repository and have the fine grained versioning that we needed.

140
00:15:06,810 --> 00:15:12,190
In addition, if the global or any other repository fail, we always have copies of it stored in the machines

141
00:15:12,190 --> 00:15:15,780
of all those participated.

142
00:15:15,780 --> 00:15:22,240
Thus, we will never lose the versioning information in the case of a catastrophic event.

143
00:15:22,240 --> 00:15:31,580
There are different tools available for working with Git repositories for all the operating systems. On Windows, Git Bash is a free command line tool.

144
00:15:31,580 --> 00:15:35,290
SourceTree is also free and has a graphical user interface that makes working

145
00:15:35,290 --> 00:15:40,470
with Git repositories easier for those not feeling confident with the command line.

146
00:15:40,470 --> 00:15:48,900
SourceTree is available for free for the Mac operating system while Git is pre-installed and available through the terminal both in Mac and Linux.

147
00:15:48,900 --> 00:15:58,190
Linux users, also have the option of Git Cola and GitK. Two cross platform solutions

148
00:15:58,190 --> 00:16:04,130
are the first EGit as an Eclipse plugin and the second through the tool called GitKraken.

149
00:16:04,130 --> 00:16:13,430
I've personally used SourceTree and the command line alternative on both Windows and Mac, and they work fine for most of the scenarios.

150
00:16:13,430 --> 00:16:22,990
Due to the way that it is developed, Git promotes the use of small commits, which, as explained, can also be off-line.

151
00:16:22,990 --> 00:16:28,360
It encourages branching and it's nowadays the most widely used version control system.

152
00:16:28,360 --> 00:16:35,110
It also has more features that SVN. However, it can be difficult to understand and work with.

153
00:16:35,110 --> 00:16:39,070
Yes, it is more difficult than SVN with a steep learning curve.

154
00:16:39,070 --> 00:16:43,690
But I promise that after a while, it's going to be your best friend in group projects.

155
00:16:43,690 --> 00:16:49,990
Just give it some time. That's all about the theoretical aspects of version control systems.

156
00:16:49,990 --> 00:16:58,150
I will now switch to the practise session in which I will perform some basic and some more advanced versioning activities using Git.

157
00:16:58,150 --> 00:17:03,640
In the first part, I will perform some single user exercises where collaboration is not needed.

158
00:17:03,640 --> 00:17:07,300
I will use the terminal for this. In the second part,

159
00:17:07,300 --> 00:17:10,810
I will switch too SourceTree and work in a collaborative manner,

160
00:17:10,810 --> 00:17:19,690
where, I will show how collaboration is achieved and how you can work out maybe the most scary part of using Git that of conflicts resolution.

161
00:17:19,690 --> 00:17:23,560
Please feel free to paause the videos at any time and follow what I'm doing on my screen,

162
00:17:23,560 --> 00:17:29,160
on your own machine.

